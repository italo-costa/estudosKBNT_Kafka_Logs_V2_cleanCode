# Virtual Stock Service Configuration
# Hexagonal Architecture Microservice A

server:
  port: 8084
  servlet:
    context-path: /
  compression:
    enabled: true
  error:
    include-message: always
    include-binding-errors: always

spring:
  application:
    name: virtual-stock-service
  
  profiles:
    active: dev
    
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/virtualstock
    username: virtualstock_user
    password: virtualstock_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: VirtualStockConnectionPool
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      
  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        generate_statistics: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        
  # Flyway Database Migration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    client-id: virtual-stock-service
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 1
      retries: 1
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      compression-type: snappy
      enable-idempotence: false
      properties:
        max.in.flight.requests.per.connection: 1
        delivery.timeout.ms: 5000
        request.timeout.ms: 3000
        
  # JSON Serialization
  jackson:
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
      accept-empty-string-as-null-object: true
    default-property-inclusion: non_null
    time-zone: UTC

# Virtual Stock Specific Configuration
virtual-stock:
  kafka:
    topics:
      stock-updates: virtual-stock-updates
      high-priority-stock-updates: virtual-stock-high-priority-updates
    producer:
      retry-attempts: 3
      retry-backoff-ms: 1000
      
  business:
    low-stock-threshold: 10
    max-reservation-percentage: 80
    
  performance:
    async-processing: true
    batch-size: 100

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        kafka.producer: true
      percentiles:
        http.server.requests: 0.5,0.9,0.95,0.99
        
# Logging Configuration  
logging:
  level:
    com.kbnt.virtualstock: DEBUG
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.transaction: DEBUG
    
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{component:-VIRTUAL-STOCK}] [%X{owner:-Unknown}] [%X{messageId:-}] [%X{topic:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{component:-VIRTUAL-STOCK}] [%X{owner:-Unknown}] [%X{messageId:-}] [%X{topic:-}] %logger{36} - %msg%n"
    
  file:
    name: logs/virtual-stock-service.log
    max-size: 10MB
    max-history: 30
    total-size-cap: 300MB

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: method
  info:
    title: Virtual Stock Service API
    description: Hexagonal Architecture API for Virtual Stock Management
    version: 2.0.0
    contact:
      name: KBNT Development Team
      email: dev@kbnt.com
      
---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
      
  datasource:
    url: jdbc:h2:mem:virtualstock;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
    username: sa
    password: 
    driver-class-name: org.h2.Driver
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    
  h2:
    console:
      enabled: true
      path: /h2-console
      
logging:
  level:
    com.kbnt.virtualstock: DEBUG
    org.springframework.web: DEBUG
    
---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
      
  datasource:
    hikari:
      minimum-idle: 10
      maximum-pool-size: 50
      
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    
logging:
  level:
    com.kbnt.virtualstock: INFO
    org.springframework.web: WARN
    
server:
  port: ${SERVER_PORT:8080}
  
virtual-stock:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  
---
# Docker Profile  
spring:
  config:
    activate:
      on-profile: docker
      
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:virtualstock}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    
  jpa:
    hibernate:
      ddl-auto: create-drop
      
logging:
  level:
    com.kbnt.virtualstock: INFO
    
virtual-stock:
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    
---
# Test Profile  
spring:
  config:
    activate:
      on-profile: test
      
  datasource:
    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
    username: sa
    password:
    driver-class-name: org.h2.Driver
    
  jpa:
    hibernate:
      ddl-auto: create-drop
      
  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}
    
logging:
  level:
    com.kbnt.virtualstock: DEBUG
    org.springframework.test: INFO
