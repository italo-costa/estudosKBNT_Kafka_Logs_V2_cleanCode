# =============================================================================
# KBNT KAFKA LOGS - ESCALABILIDADE HORIZONTAL E VERTICAL COMPLETA
# =============================================================================
# Configuração otimizada para máximo throughput e escalabilidade
# Recursos: 32 CPUs, 7.6GB RAM, 936GB disco
# Estratégia: Multi-instância + Load Balancing + Auto-scaling
# =============================================================================

version: '3.8'

# =============================================================================
# NETWORKS CONFIGURATION
# =============================================================================
networks:
  kbnt-scalable-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================
volumes:
  postgres-scalable-data:
  postgres-scalable-replica-data:
  elasticsearch-scalable-data:
  elasticsearch-scalable-data2:
  zookeeper1-data:
  zookeeper2-data:
  zookeeper3-data:
  kafka1-data:
  kafka2-data:
  kafka3-data:

services:
  # =============================================================================
  # DATABASE CLUSTER - MASTER/REPLICA PARA ESCALABILIDADE VERTICAL
  # =============================================================================
  postgres-master:
    image: postgres:15-alpine
    container_name: postgres-master
    environment:
      POSTGRES_DB: kbnt_db
      POSTGRES_USER: kbnt_user
      POSTGRES_PASSWORD: kbnt_password
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replica_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-scalable-data:/var/lib/postgresql/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.1.10
    mem_limit: 1024m
    cpus: '4.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kbnt_user -d kbnt_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: |
      bash -c "
      echo 'host replication replicator 172.20.1.0/24 md5' >> /var/lib/postgresql/data/pg_hba.conf
      echo 'wal_level = replica' >> /var/lib/postgresql/data/postgresql.conf
      echo 'max_wal_senders = 3' >> /var/lib/postgresql/data/postgresql.conf
      echo 'max_replication_slots = 3' >> /var/lib/postgresql/data/postgresql.conf
      echo 'shared_preload_libraries = pg_stat_statements' >> /var/lib/postgresql/data/postgresql.conf
      echo 'max_connections = 200' >> /var/lib/postgresql/data/postgresql.conf
      echo 'shared_buffers = 256MB' >> /var/lib/postgresql/data/postgresql.conf
      postgres
      "

  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica
    environment:
      POSTGRES_REPLICATION_MODE: slave
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replica_password
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_MASTER_PORT_NUMBER: 5432
    ports:
      - "5433:5432"
    volumes:
      - postgres-scalable-replica-data:/var/lib/postgresql/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.1.11
    mem_limit: 1024m
    cpus: '2.0'
    depends_on:
      - postgres-master

  # =============================================================================
  # ZOOKEEPER CLUSTER - 3 NODES PARA ALTA DISPONIBILIDADE
  # =============================================================================
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -Xms256m -Xmx512m"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper1-data:/var/lib/zookeeper/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.2.10
    mem_limit: 512m
    cpus: '1.0'

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper2
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -Xms256m -Xmx512m"
    ports:
      - "2182:2182"
    volumes:
      - zookeeper2-data:/var/lib/zookeeper/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.2.11
    mem_limit: 512m
    cpus: '1.0'

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper3
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -Xms256m -Xmx512m"
    ports:
      - "2183:2183"
    volumes:
      - zookeeper3-data:/var/lib/zookeeper/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.2.12
    mem_limit: 512m
    cpus: '1.0'

  # =============================================================================
  # KAFKA CLUSTER - 3 BROKERS PARA MÁXIMO THROUGHPUT
  # =============================================================================
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_BATCH_SIZE: 32768
      KAFKA_LINGER_MS: 10
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m"
    ports:
      - "9092:9092"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.3.10
    mem_limit: 1024m
    cpus: '2.0'

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_BATCH_SIZE: 32768
      KAFKA_LINGER_MS: 10
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m"
    ports:
      - "9093:9093"
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.3.11
    mem_limit: 1024m
    cpus: '2.0'

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2182,zookeeper3:2183'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_COMPRESSION_TYPE: lz4
      KAFKA_BATCH_SIZE: 32768
      KAFKA_LINGER_MS: 10
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m"
    ports:
      - "9094:9094"
    volumes:
      - kafka3-data:/var/lib/kafka/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.3.12
    mem_limit: 1024m
    cpus: '2.0'

  # =============================================================================
  # ELASTICSEARCH CLUSTER - 2 NODES PARA ALTA PERFORMANCE
  # =============================================================================
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch1
    environment:
      - node.name=elasticsearch1
      - cluster.name=kbnt-scalable-cluster
      - discovery.seed_hosts=elasticsearch2
      - cluster.initial_master_nodes=elasticsearch1,elasticsearch2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - xpack.security.enabled=false
      - node.roles=master,data,ingest
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-scalable-data:/usr/share/elasticsearch/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.4.10
    mem_limit: 1024m
    cpus: '2.0'

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch2
    environment:
      - node.name=elasticsearch2
      - cluster.name=kbnt-scalable-cluster
      - discovery.seed_hosts=elasticsearch1
      - cluster.initial_master_nodes=elasticsearch1,elasticsearch2
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - xpack.security.enabled=false
      - node.roles=master,data,ingest
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch-scalable-data2:/usr/share/elasticsearch/data
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.4.11
    mem_limit: 1024m
    cpus: '2.0'

  # =============================================================================
  # LOAD BALANCER - HAPROXY PARA DISTRIBUIÇÃO DE CARGA
  # =============================================================================
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: kbnt-load-balancer
    ports:
      - "80:80"
      - "8080:8080"
      - "8081:8081"
      - "8090:8090"
      - "8443:8443"
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.5.10
    depends_on:
      - api-gateway-1
      - api-gateway-2
    mem_limit: 256m
    cpus: '1.0'

  # =============================================================================
  # MICROSERVICES - MÚLTIPLAS INSTÂNCIAS PARA ESCALABILIDADE HORIZONTAL
  # =============================================================================
  
  # API GATEWAY - 2 INSTÂNCIAS COM LOAD BALANCING
  api-gateway-1:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    image: docker-api-gateway-scalable
    container_name: api-gateway-1
    depends_on:
      - virtual-stock-service-1
      - virtual-stock-service-2
      - log-producer-service-1
      - log-consumer-service-1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=api-gateway-1
      - VIRTUAL_STOCK_SERVICE_URL=http://load-balancer:8086
      - LOG_PRODUCER_SERVICE_URL=http://load-balancer:8085
      - LOG_CONSUMER_SERVICE_URL=http://load-balancer:8084
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.6.10
    mem_limit: 1024m
    cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  api-gateway-2:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    image: docker-api-gateway-scalable
    container_name: api-gateway-2
    depends_on:
      - virtual-stock-service-1
      - virtual-stock-service-2
      - log-producer-service-1
      - log-consumer-service-1
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=api-gateway-2
      - VIRTUAL_STOCK_SERVICE_URL=http://load-balancer:8086
      - LOG_PRODUCER_SERVICE_URL=http://load-balancer:8085
      - LOG_CONSUMER_SERVICE_URL=http://load-balancer:8084
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.6.11
    mem_limit: 1024m
    cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # VIRTUAL STOCK SERVICE - 3 INSTÂNCIAS PARA ALTA CARGA
  virtual-stock-service-1:
    build:
      context: ./microservices/virtual-stock-service
      dockerfile: Dockerfile
    image: docker-virtual-stock-service-scalable
    container_name: virtual-stock-service-1
    depends_on:
      - postgres-master
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=virtual-stock-service-1
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-master:5432/kbnt_db
      - SPRING_DATASOURCE_USERNAME=kbnt_user
      - SPRING_DATASOURCE_PASSWORD=kbnt_password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.7.10
    mem_limit: 1024m
    cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  virtual-stock-service-2:
    build:
      context: ./microservices/virtual-stock-service
      dockerfile: Dockerfile
    image: docker-virtual-stock-service-scalable
    container_name: virtual-stock-service-2
    depends_on:
      - postgres-master
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=virtual-stock-service-2
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-master:5432/kbnt_db
      - SPRING_DATASOURCE_USERNAME=kbnt_user
      - SPRING_DATASOURCE_PASSWORD=kbnt_password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.7.11
    mem_limit: 1024m
    cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  virtual-stock-service-3:
    build:
      context: ./microservices/virtual-stock-service
      dockerfile: Dockerfile
    image: docker-virtual-stock-service-scalable
    container_name: virtual-stock-service-3
    depends_on:
      - postgres-master
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=virtual-stock-service-3
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-replica:5432/kbnt_db
      - SPRING_DATASOURCE_USERNAME=kbnt_user
      - SPRING_DATASOURCE_PASSWORD=kbnt_password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms512m -Xmx1024m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.7.12
    mem_limit: 1024m
    cpus: '2.0'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # LOG PRODUCER SERVICE - 2 INSTÂNCIAS
  log-producer-service-1:
    build:
      context: ./microservices/log-producer-service
      dockerfile: Dockerfile
    image: docker-log-producer-service-scalable
    container_name: log-producer-service-1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=log-producer-service-1
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms256m -Xmx512m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.8.10
    mem_limit: 512m
    cpus: '1.0'

  log-producer-service-2:
    build:
      context: ./microservices/log-producer-service
      dockerfile: Dockerfile
    image: docker-log-producer-service-scalable
    container_name: log-producer-service-2
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=log-producer-service-2
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms256m -Xmx512m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.8.11
    mem_limit: 512m
    cpus: '1.0'

  # LOG CONSUMER SERVICE - 2 INSTÂNCIAS
  log-consumer-service-1:
    build:
      context: ./microservices/log-consumer-service
      dockerfile: Dockerfile
    image: docker-log-consumer-service-scalable
    container_name: log-consumer-service-1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - elasticsearch1
      - elasticsearch2
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=log-consumer-service-1
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch1:9200,http://elasticsearch2:9201
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms256m -Xmx512m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.9.10
    mem_limit: 512m
    cpus: '1.0'

  log-consumer-service-2:
    build:
      context: ./microservices/log-consumer-service
      dockerfile: Dockerfile
    image: docker-log-consumer-service-scalable
    container_name: log-consumer-service-2
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - elasticsearch1
      - elasticsearch2
    environment:
      - SPRING_PROFILES_ACTIVE=docker,scalable
      - SERVER_PORT=8080
      - EUREKA_INSTANCE_INSTANCE_ID=log-consumer-service-2
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch1:9200,http://elasticsearch2:9201
      - JAVA_OPTS=-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -Xms256m -Xmx512m -XX:+UseStringDeduplication
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.9.11
    mem_limit: 512m
    cpus: '1.0'

  # =============================================================================
  # MONITORING E MÉTRICAS
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: kbnt-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.10.10
    mem_limit: 512m
    cpus: '1.0'

  grafana:
    image: grafana/grafana:10.0.3
    container_name: kbnt-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.10.11
    mem_limit: 256m
    cpus: '0.5'

  # =============================================================================
  # REDIS PARA CACHE DISTRIBUÍDO
  # =============================================================================
  redis-cluster-1:
    image: redis:7-alpine
    container_name: redis-cluster-1
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --port 7001
    ports:
      - "7001:7001"
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.11.10
    mem_limit: 256m
    cpus: '0.5'

  redis-cluster-2:
    image: redis:7-alpine
    container_name: redis-cluster-2
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --port 7002
    ports:
      - "7002:7002"
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.11.11
    mem_limit: 256m
    cpus: '0.5'

  redis-cluster-3:
    image: redis:7-alpine
    container_name: redis-cluster-3
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --port 7003
    ports:
      - "7003:7003"
    networks:
      kbnt-scalable-network:
        ipv4_address: 172.20.11.12
    mem_limit: 256m
    cpus: '0.5'
