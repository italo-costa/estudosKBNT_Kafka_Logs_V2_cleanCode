# =============================================================================
# KBNT MICROSERVICES - DEVELOPMENT ENVIRONMENT 
# =============================================================================
version: '3.8'

networks:
  kbnt-network:
    driver: bridge
    name: kbnt-dev-network

services:
  # =============================================================================
  # INFRASTRUCTURE LAYER - DATABASE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: kbnt-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=loganalytics
      - POSTGRES_USER=loguser
      - POSTGRES_PASSWORD=logpass123
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U loguser -d loganalytics"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # INFRASTRUCTURE LAYER - CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: kbnt-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redispass123
    volumes:
      - redis_data_dev:/data
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # MESSAGING LAYER - KAFKA ECOSYSTEM
  # =============================================================================
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: kbnt-zookeeper-dev
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data_dev:/bitnami/zookeeper
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:3.5
    container_name: kbnt-kafka-dev
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data_dev:/bitnami/kafka
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 45s
      timeout: 15s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # APPLICATION LAYER - API GATEWAY
  # =============================================================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: kbnt-api-gateway-dev
    ports:
      - "8080:8080"
      - "9080:9080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=9080
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # APPLICATION LAYER - MICROSERVICES
  # =============================================================================
  virtual-stock-service:
    build:
      context: ./virtual-stock-service
      dockerfile: Dockerfile
    container_name: kbnt-virtual-stock-dev
    ports:
      - "8084:8084"
      - "9084:9080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/loganalytics
      - SPRING_DATASOURCE_USERNAME=loguser
      - SPRING_DATASOURCE_PASSWORD=logpass123
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  log-producer-service:
    build:
      context: ./log-producer-service
      dockerfile: Dockerfile
    container_name: kbnt-log-producer-dev
    ports:
      - "8081:8080"
      - "9081:9080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - kbnt-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  zookeeper_data_dev:
    driver: local
  kafka_data_dev:
    driver: local
