version: '3.8'

services:
  # =============================================================================
  # INFRAESTRUTURA DE DADOS - POSTGRESQL
  # =============================================================================
  postgres-master:
    image: postgres:15-alpine
    container_name: postgres-master
    environment:
      POSTGRES_DB: kbnt_db
      POSTGRES_USER: kbnt_user
      POSTGRES_PASSWORD: kbnt_password
      POSTGRES_REPLICATION_MODE: master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replica_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-scalable-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kbnt_user -d kbnt_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kbnt-scalable-network

  # =============================================================================
  # CLUSTER ZOOKEEPER
  # =============================================================================
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper1-data:/var/lib/zookeeper/data
    networks:
      - kbnt-scalable-network

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper2-data:/var/lib/zookeeper/data
    networks:
      - kbnt-scalable-network

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper3
    ports:
      - "2183:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper3-data:/var/lib/zookeeper/data
    networks:
      - kbnt-scalable-network

  # =============================================================================
  # CLUSTER KAFKA
  # =============================================================================
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka1-data:/var/lib/kafka/data
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    networks:
      - kbnt-scalable-network

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka2-data:/var/lib/kafka/data
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    networks:
      - kbnt-scalable-network

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka3-data:/var/lib/kafka/data
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    networks:
      - kbnt-scalable-network

  # =============================================================================
  # ELASTICSEARCH CLUSTER
  # =============================================================================
  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch1
    ports:
      - "9200:9200"
    environment:
      - node.name=elasticsearch1
      - cluster.name=kbnt-scalable-cluster
      - cluster.initial_master_nodes=elasticsearch1
      - discovery.seed_hosts=elasticsearch1
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-scalable-data:/usr/share/elasticsearch/data
    networks:
      - kbnt-scalable-network

  # =============================================================================
  # MICROSERVIÇOS KBNT - MÚLTIPLAS INSTÂNCIAS
  # =============================================================================
  virtual-stock-service-1:
    build:
      context: ./microservices/virtual-stock-service
      dockerfile: Dockerfile
    container_name: virtual-stock-service-1
    environment:
      - SERVER_PORT=8084
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-master:5432/kbnt_db
      - SPRING_DATASOURCE_USERNAME=kbnt_user
      - SPRING_DATASOURCE_PASSWORD=kbnt_password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8084:8084"
    depends_on:
      - postgres-master
      - kafka1
      - kafka2
      - kafka3
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 1m
    networks:
      - kbnt-scalable-network

  virtual-stock-service-2:
    build:
      context: ./microservices/virtual-stock-service
      dockerfile: Dockerfile
    container_name: virtual-stock-service-2
    environment:
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-master:5432/kbnt_db
      - SPRING_DATASOURCE_USERNAME=kbnt_user
      - SPRING_DATASOURCE_PASSWORD=kbnt_password
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-master
      - kafka1
      - kafka2
      - kafka3
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 1m
    networks:
      - kbnt-scalable-network

  log-producer-service-1:
    build:
      context: ./microservices/log-producer-service
      dockerfile: Dockerfile
    container_name: log-producer-service-1
    environment:
      - SERVER_PORT=8080
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    networks:
      - kbnt-scalable-network

  log-consumer-service-1:
    build:
      context: ./microservices/log-consumer-service
      dockerfile: Dockerfile
    container_name: log-consumer-service-1
    environment:
      - SERVER_PORT=8080
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch1:9200
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - elasticsearch1
    networks:
      - kbnt-scalable-network

  api-gateway-1:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-1
    environment:
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=simple
      - VIRTUAL_STOCK_SERVICE_URL=http://virtual-stock-service:8084
      - LOG_PRODUCER_SERVICE_URL=http://log-producer-service-1:8080
      - LOG_CONSUMER_SERVICE_URL=http://log-consumer-service-1:8080
    ports:
      - "8080:8080"
    depends_on:
      - virtual-stock-service-1
      - virtual-stock-service-2
      - log-producer-service-1
      - log-consumer-service-1
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/actuator/health"]
      timeout: 10s
      interval: 30s
      retries: 3
      start_period: 1m
    networks:
      - kbnt-scalable-network

  # =============================================================================
  # MONITORAMENTO
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: kbnt-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - kbnt-scalable-network

  grafana:
    image: grafana/grafana:10.0.3
    container_name: kbnt-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - ./config/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - kbnt-scalable-network

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  kbnt-scalable-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-scalable-data:
  elasticsearch-scalable-data:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  zookeeper1-data:
  zookeeper2-data:
  zookeeper3-data:
