version: '3.8'

# Independent Microservices Docker Compose
# This allows microservices to run without full infrastructure

services:
  log-producer-service:
    build:
      context: ./microservices/log-producer-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: independent,docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Fallback to external Kafka if local not available
      KAFKA_FALLBACK_SERVERS: ${EXTERNAL_KAFKA_SERVERS:-localhost:9092}
      # Topic configuration
      TOPIC_APPLICATION_LOGS: application-logs
      TOPIC_ERROR_LOGS: error-logs
      TOPIC_AUDIT_LOGS: audit-logs
      TOPIC_FINANCIAL_LOGS: financial-logs
      # Independence settings
      REQUIRE_ALL_TOPICS: false
      AUTO_CREATE_TOPICS: true
      DEGRADED_MODE_ENABLED: true
      STARTUP_CHECK_TIMEOUT: 30000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/log-producer/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - microservices
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  log-consumer-service:
    build:
      context: ./microservices/log-consumer-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: independent,docker
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Consumer group configuration
      KAFKA_CONSUMER_GROUP_ID: log-consumer-group-independent
      # Topic subscription with fallbacks
      KAFKA_TOPICS: application-logs,error-logs,audit-logs,financial-logs
      # External API configuration
      EXTERNAL_API_URL: ${EXTERNAL_API_URL:-http://httpbin.org/post}
      # Independence settings
      REQUIRE_ALL_TOPICS: false
      GRACEFUL_SHUTDOWN_TIMEOUT: 30s
      CONSUMER_AUTO_COMMIT: false
      CONSUMER_MAX_POLL_RECORDS: 100
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/log-consumer/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - microservices
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Lightweight Kafka for testing (optional)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper-independent
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka-independent
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=9997
      # Auto topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
      # Performance tuning for development
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 104857600
      KAFKA_LOG_CLEANUP_POLICY: delete
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - microservices
    restart: unless-stopped

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-independent
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservices
    restart: unless-stopped

networks:
  microservices:
    driver: bridge
    name: microservices-network
